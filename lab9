#include <stdio.h>
#include <stdlib.h> // Include stdlib.h for malloc

// RecordType
struct RecordType
{
    int id;
    char name;
    int order;
};

// Structure for each node in the linked list
struct Node
{
    struct RecordType data;
    struct Node *next;
};

// HashType structure with an array of pointers to linked lists
struct HashType
{
    struct Node *head;
    // You can add additional members here if needed
};

#define HASH_SIZE 10 // Size of the hash table array

// Compute the hash function
int hash(int x)
{
    return x % HASH_SIZE; // Simple modulo hash function for demonstration purposes
}

// Parses input file to an array of RecordType
int parseData(char *inputFileName, struct RecordType **ppData)
{
    FILE *inFile = fopen(inputFileName, "r");
    int dataSz = 0;
    int i, n;
    char c;
    struct RecordType *pRecord;
    *ppData = NULL;

    if (inFile)
    {
        fscanf(inFile, "%d\n", &dataSz);
        *ppData = (struct RecordType *)malloc(sizeof(struct RecordType) * dataSz);
        // Implement parse data block
        if (*ppData == NULL)
        {
            printf("Cannot allocate memory\n");
            exit(-1);
        }
        for (i = 0; i < dataSz; ++i)
        {
            pRecord = *ppData + i;
            fscanf(inFile, "%d ", &n);
            pRecord->id = n;
            fscanf(inFile, "%c ", &c);
            pRecord->name = c;
            fscanf(inFile, "%d ", &n);
            pRecord->order = n;
        }

        fclose(inFile);
    }

    return dataSz;
}

// Prints the records
void printRecords(struct RecordType pData[], int dataSz)
{
    int i;
    printf("\nRecords:\n");
    for (i = 0; i < dataSz; ++i)
    {
        printf("\t%d %c %d\n", pData[i].id, pData[i].name, pData[i].order);
    }
    printf("\n\n");
}

// Display records in the hash structure
void displayRecordsInHash(struct HashType *pHashArray, int hashSz)
{
    int i;
    struct Node *current;

    for (i = 0; i < hashSz; ++i)
    {
        printf("Index %d -> ", i);
        current = pHashArray[i].head;
        while (current != NULL)
        {
            printf("%d %c %d -> ", current->data.id, current->data.name, current->data.order);
            current = current->next;
        }
        printf("\n");
    }
}

int main(void)
{
    struct RecordType *pRecords;
    int recordSz = 0;

    recordSz = parseData("input.txt", &pRecords);
    printRecords(pRecords, recordSz);

    // Initialize the hash table array
    struct HashType hashArray[HASH_SIZE] = {NULL};

    // Insert records into the hash table
    for (int i = 0; i < recordSz; i++)
    {
        int index = hash(pRecords[i].id); // Get the index using the hash function
        struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
        newNode->data = pRecords[i];
        newNode->next = NULL;

        // If the index is not yet occupied
        if (hashArray[index].head == NULL)
        {
            hashArray[index].head = newNode;
        }
        else
        {
            // If the index is occupied, append to the end of the linked list
            struct Node *temp = hashArray[index].head;
            while (temp->next != NULL)
            {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Display records in the hash table
    displayRecordsInHash(hashArray, HASH_SIZE);

    // Free dynamically allocated memory for the records
    free(pRecords);

    // Free dynamically allocated memory for the linked lists
    for (int i = 0; i < HASH_SIZE; i++)
    {
        struct Node *current = hashArray[i].head;
        struct Node *next;
        while (current != NULL)
        {
            next = current->next;
            free(current);
            current = next;
        }
    }

    return 0;
}
